// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using GavelPoMobile.SandBox3.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace GavelPoMobile.SandBox3.Data
{
    public partial class GVLLOCALContext
    {
        private IGVLLOCALContextProcedures _procedures;

        public virtual IGVLLOCALContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new GVLLOCALContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IGVLLOCALContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class GVLLOCALContextProcedures : IGVLLOCALContextProcedures
    {
        private readonly GVLLOCALContext _context;

        public GVLLOCALContextProcedures(GVLLOCALContext context)
        {
            _context = context;
        }

        public virtual async Task<int> UpdatePOLineStatusAsync(int? Oid, int? Status, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Oid",
                    Value = Oid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 200,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdatePOLineStatus] @Oid, @Status, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdatePurchaseOrderStatusAsync(int? Oid, int? Status, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Oid",
                    Value = Oid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 1000,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdatePurchaseOrderStatus] @Oid, @Status, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
